"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import int32_tm

class good_mic_msg(object):
    __slots__ = ["timestamp", "VAD", "angle", "dir"]

    def __init__(self):
        self.timestamp = 0
        self.VAD = 0
        self.angle = 0
        self.dir = int32_tm()

    def encode(self):
        buf = BytesIO()
        buf.write(good_mic_msg._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qii", self.timestamp, self.VAD, self.angle))
        assert self.dir._get_packed_fingerprint() == int32_tm._get_packed_fingerprint()
        self.dir._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != good_mic_msg._get_packed_fingerprint():
            raise ValueError("Decode error")
        return good_mic_msg._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = good_mic_msg()
        self.timestamp, self.VAD, self.angle = struct.unpack(">qii", buf.read(16))
        self.dir = int32_tm._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if good_mic_msg in parents: return 0
        newparents = parents + [good_mic_msg]
        tmphash = (0xd4dfe413d885b417+ int32_tm._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if good_mic_msg._packed_fingerprint is None:
            good_mic_msg._packed_fingerprint = struct.pack(">Q", good_mic_msg._get_hash_recursive([]))
        return good_mic_msg._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

